/* eslint-disable */
import {
  DomHandler as t,
  ZIndexUtils as e,
  UniqueComponentId as o,
  ConnectedOverlayScrollHandler as l,
} from 'primevue/utils';

function i(t) {
  s(t.currentTarget);
}
function n(t) {
  d(t.currentTarget);
}
function p(t) {
  s(t.currentTarget);
}
function r(t) {
  d(t.currentTarget);
}
function u(t) {
  d(t.currentTarget);
}
function s(i) {
  if (i.$_ptooltipDisabled) return;
  const n = (function (t) {
    const e = `${o()}_tooltip`;
    t.$_ptooltipId = e;
    const l = document.createElement('div');
    l.id = e;
    const i = document.createElement('div');
    (i.className = 'p-tooltip-arrow'), l.appendChild(i);
    const n = document.createElement('div');
    return (
      (n.className = 'p-tooltip-text'),
      (n.innerHTML = t.$_ptooltipValue),
      l.appendChild(n),
      document.body.appendChild(l),
      (l.style.display = 'inline-block'),
      l
    );
  })(i);
  !(function (t) {
    const e = t.$_ptooltipModifiers;
    e.top
      ? (m(t), h(t) && $(t))
      : e.left
      ? (v(t), h(t) && (g(t), h(t) && (m(t), h(t) && $(t))))
      : e.bottom
      ? ($(t), h(t) && m(t))
      : (g(t), h(t) && (v(t), h(t) && (m(t), h(t) && $(t))));
  })(i),
    t.fadeIn(n, 250),
    window.addEventListener('resize', function e() {
      t.isAndroid() || d(i), this.removeEventListener('resize', e);
    }),
    (function (t) {
      t.$_ptooltipScrollHandler ||
        (t.$_ptooltipScrollHandler = new l(t, () => {
          d(t);
        })),
        t.$_ptooltipScrollHandler.bindScrollListener();
    })(i),
    e.set('tooltip', n, i.$_ptooltipZIndex);
}
function d(t) {
  c(t),
    (function (t) {
      t.$_ptooltipScrollHandler && t.$_ptooltipScrollHandler.unbindScrollListener();
    })(t),
    e.clear(t);
}
function a(t) {
  return document.getElementById(t.$_ptooltipId);
}
function c(t) {
  if (t) {
    const e = a(t);
    e && e.parentElement && document.body.removeChild(e), (t.$_ptooltipId = null);
  }
}
function f(e) {
  const o = e.getBoundingClientRect();
  return {
    left: o.left + t.getWindowScrollLeft(),
    top: o.top + t.getWindowScrollTop(),
  };
}
function g(e) {
  _(e, 'right');
  const o = a(e);
  const l = f(e);
  const i = l.left + t.getOuterWidth(e);
  const n = l.top + (t.getOuterHeight(e) - t.getOuterHeight(o)) / 2;
  (o.style.left = `${i}px`), (o.style.top = `${n}px`);
}
function v(e) {
  _(e, 'left');
  const o = a(e);
  const l = f(e);
  const i = l.left - t.getOuterWidth(o);
  const n = l.top + (t.getOuterHeight(e) - t.getOuterHeight(o)) / 2;
  (o.style.left = `${i}px`), (o.style.top = `${n}px`);
}
function m(e) {
  _(e, 'top');
  const o = a(e);
  const l = f(e);
  const i = l.left + (t.getOuterWidth(e) - t.getOuterWidth(o)) / 2;
  const n = l.top - t.getOuterHeight(o);
  (o.style.left = `${i}px`), (o.style.top = `${n}px`);
}
function $(e) {
  _(e, 'bottom');
  const o = a(e);
  const l = f(e);
  const i = l.left + (t.getOuterWidth(e) - t.getOuterWidth(o)) / 2;
  const n = l.top + t.getOuterHeight(e);
  (o.style.left = `${i}px`), (o.style.top = `${n}px`);
}
function _(t, e) {
  const o = a(t);
  (o.style.left = '-999px'),
    (o.style.top = '-999px'),
    (o.className = `p-tooltip p-component p-tooltip-${e} ${t.$_ptooltipClass || ''}`);
}
function h(e) {
  const o = a(e);
  const l = o.getBoundingClientRect();
  const i = l.top;
  const n = l.left;
  const p = t.getOuterWidth(o);
  const r = t.getOuterHeight(o);
  const u = t.getViewport();
  return n + p > u.width || n < 0 || i < 0 || i + r > u.height;
}
function b(e) {
  return t.hasClass(e, 'p-inputwrapper') ? t.findSingle(e, 'input') : e;
}
function y(t) {
  return t.modifiers && Object.keys(t.modifiers).length
    ? t.modifiers
    : t.arg && typeof t.arg === 'object'
    ? Object.entries(t.arg).reduce(
        (t, [e, o]) => ((e !== 'event' && e !== 'position') || (t[o] = !0), t),
        {},
      )
    : {};
}
const E = {
  beforeMount(t, e) {
    const o = b(t);
    (o.$_ptooltipModifiers = y(e)),
      e.value &&
        (typeof e.value === 'string'
          ? ((o.$_ptooltipValue = e.value), (o.$_ptooltipDisabled = !1), (o.$_ptooltipClass = null))
          : ((o.$_ptooltipValue = e.value.value),
            (o.$_ptooltipDisabled = e.value.disabled || !1),
            (o.$_ptooltipClass = e.value.class)),
        (o.$_ptooltipZIndex =
          e.instance.$primevue &&
          e.instance.$primevue.config &&
          e.instance.$primevue.config.zIndex.tooltip),
        (function (t) {
          t.$_ptooltipModifiers.focus
            ? (t.addEventListener('focus', p), t.addEventListener('blur', r))
            : (t.addEventListener('mouseenter', i),
              t.addEventListener('mouseleave', n),
              t.addEventListener('click', u));
        })(o));
  },
  unmounted(t) {
    const o = b(t);
    c(o),
      (function (t) {
        t.$_ptooltipModifiers.focus
          ? (t.removeEventListener('focus', p), t.removeEventListener('blur', r))
          : (t.removeEventListener('mouseenter', i),
            t.removeEventListener('mouseleave', n),
            t.removeEventListener('click', u));
      })(o),
      o.$_ptooltipScrollHandler &&
        (o.$_ptooltipScrollHandler.destroy(), (o.$_ptooltipScrollHandler = null)),
      e.clear(t);
  },
  updated(t, e) {
    const o = b(t);
    (o.$_ptooltipModifiers = y(e)),
      e.value &&
        (typeof e.value === 'string'
          ? ((o.$_ptooltipValue = e.value), (o.$_ptooltipDisabled = !1), (o.$_ptooltipClass = null))
          : ((o.$_ptooltipValue = e.value.value),
            (o.$_ptooltipDisabled = e.value.disabled || !1),
            (o.$_ptooltipClass = e.value.class)));
  },
};
export default E;
